@page "/fetchdata"
@using MediatR
@inject IMediator MediatR
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_forecasts == null)
{
	<p><em>@_loadingOrError</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Date</th>
				<th>Temp. (C)</th>
				<th>Temp. (F)</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var forecast in _forecasts)
			{
				<tr>
					<td>@forecast.Date.ToShortDateString()</td>
					<td>@forecast.TemperatureC</td>
					<td>@forecast.TemperatureF</td>
					<td>@forecast.Summary</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private string _loadingOrError = "Loading...";
	private IEnumerable<WeatherForecast>? _forecasts;

	protected override async Task OnInitializedAsync()
	{
		var response = await MediatR.Send(new ForecastForDaysRequest(10));

		response.Match<IEnumerable<WeatherForecast>>(
			(data) =>
			{
				_forecasts = data;
			},
			(error, _) =>
			{
				_loadingOrError = error;
			}
		);
	}
}
